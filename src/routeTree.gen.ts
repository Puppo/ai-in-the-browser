/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WebLlmRouteImport } from './routes/web-llm'
import { Route as TranslatorRouteImport } from './routes/translator'
import { Route as PromptApiRouteImport } from './routes/prompt-api'
import { Route as LanguageDetectorRouteImport } from './routes/language-detector'
import { Route as IndexRouteImport } from './routes/index'

const WebLlmRoute = WebLlmRouteImport.update({
  id: '/web-llm',
  path: '/web-llm',
  getParentRoute: () => rootRouteImport,
} as any)
const TranslatorRoute = TranslatorRouteImport.update({
  id: '/translator',
  path: '/translator',
  getParentRoute: () => rootRouteImport,
} as any)
const PromptApiRoute = PromptApiRouteImport.update({
  id: '/prompt-api',
  path: '/prompt-api',
  getParentRoute: () => rootRouteImport,
} as any)
const LanguageDetectorRoute = LanguageDetectorRouteImport.update({
  id: '/language-detector',
  path: '/language-detector',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/language-detector': typeof LanguageDetectorRoute
  '/prompt-api': typeof PromptApiRoute
  '/translator': typeof TranslatorRoute
  '/web-llm': typeof WebLlmRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/language-detector': typeof LanguageDetectorRoute
  '/prompt-api': typeof PromptApiRoute
  '/translator': typeof TranslatorRoute
  '/web-llm': typeof WebLlmRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/language-detector': typeof LanguageDetectorRoute
  '/prompt-api': typeof PromptApiRoute
  '/translator': typeof TranslatorRoute
  '/web-llm': typeof WebLlmRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/language-detector'
    | '/prompt-api'
    | '/translator'
    | '/web-llm'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/language-detector' | '/prompt-api' | '/translator' | '/web-llm'
  id:
    | '__root__'
    | '/'
    | '/language-detector'
    | '/prompt-api'
    | '/translator'
    | '/web-llm'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LanguageDetectorRoute: typeof LanguageDetectorRoute
  PromptApiRoute: typeof PromptApiRoute
  TranslatorRoute: typeof TranslatorRoute
  WebLlmRoute: typeof WebLlmRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/web-llm': {
      id: '/web-llm'
      path: '/web-llm'
      fullPath: '/web-llm'
      preLoaderRoute: typeof WebLlmRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/translator': {
      id: '/translator'
      path: '/translator'
      fullPath: '/translator'
      preLoaderRoute: typeof TranslatorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/prompt-api': {
      id: '/prompt-api'
      path: '/prompt-api'
      fullPath: '/prompt-api'
      preLoaderRoute: typeof PromptApiRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/language-detector': {
      id: '/language-detector'
      path: '/language-detector'
      fullPath: '/language-detector'
      preLoaderRoute: typeof LanguageDetectorRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LanguageDetectorRoute: LanguageDetectorRoute,
  PromptApiRoute: PromptApiRoute,
  TranslatorRoute: TranslatorRoute,
  WebLlmRoute: WebLlmRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
